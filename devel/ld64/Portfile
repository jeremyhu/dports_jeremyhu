# $Id: Portfile 92368 2012-04-26 17:51:23Z jeremyhu@macports.org $

PortSystem              1.0
PortGroup               xcode 1.0
PortGroup               xcodeversion 1.0
minimum_xcodeversions   {10 3.2.3}

# cctools uses a static library from this port when it builds, please
# revbump cctools whenever this port updates

name                    ld64
# XCode 4.3
version                 128.2
revision                3
set llvm_version        3.0
categories              devel
maintainers             mfeiri jeremyhu
homepage                http://opensource.apple.com/source/${name}/
master_sites            http://opensource.apple.com/tarballs/${name}/
license                 APSL-2.0
depends_build           port:libunwind-headers \
                        path:include/mach-o/dyld_priv.h:dyld-headers \
                        path:include/mach-o/arm/reloc.h:cctools-headers
description             ld64 is the new mach-o linker
long_description        ld64 combines several object files and libraries, \
                        resolves references, and produces an ouput file.

checksums               ${distname}${extract.suffix} \
                        rmd160  0da68b89669233d7b6cc6ebdb92482e191bc9051 \
                        sha256  96a912464e2d4d3d7cdaab0744003b0fa93d139f203c82867f659ee94b4ae9f7

patchfiles              ld64-pbxproj.patch ld64-version.patch

# We don't set llvmXX as the default variant on Tiger because it would introduce a
# dependency cycle as llvm requires apple-gcc42 and ld64 to build correctly.  Users
# wanting LTO support in ld64 on Tiger can install the +llvm variant after llvm
# has been installed.
if {![variant_isset llvm29] && ![variant_isset llvm30] && ![variant_isset llvm31] && ${os.major} >= 9} {
    default_variants +llvm30

    # Leopard/powerpc has the option to not be LTO
    if {![variant_isset llvm30] && ${os.arch} != "powerpc"} {
        ui_error "Your platform cannot be configured without LTO support in ld64.  Please enable one of the llvmXX variants, and try again."
        return -code error "Your platform cannot be configured without LTO support in ld64.  Please enable one of the llvmXX variants, and try again."
    }
}

set llvm_version {}
variant llvm29 conflicts llvm30 llvm31 description {Use llvm-2.9 for libLTO} {
    set llvm_version        2.9
    depends_lib-append      port:llvm-${llvm_version}
}

variant llvm30 conflicts llvm29 llvm31 description {Use llvm-3.0 for libLTO} {
    set llvm_version        3.0
    depends_lib-append      port:llvm-${llvm_version}
}

variant llvm31 conflicts llvm29 llvm30 description {Use llvm-3.1 for libLTO} {
    set llvm_version        3.1
    depends_lib-append      port:llvm-${llvm_version}
}

if {${os.arch} == "powerpc" || ${os.major} < 9} {
    # XCode 3.1.4
    # 97.17 could work, but it requires gcc-4.2 to build, and xcodebuild
    # isn't UsingTheRightCompiler.  We could use it for Leopard/ppc, but
    # I don't want to support too many different versions.
    version             85.2.1
    revision            6
    checksums           rmd160 42c80bd4ad6e9f96a757245e6a2b95084c009ff1 \
                        sha256 4bcbcbdfd62efdc46c51700b8f5dae2cbd1638e9e50f649d5c7f242d32fca804
    supported_archs     i386 ppc

    patchfiles-delete   ld64-pbxproj.patch ld64-version.patch
    patchfiles-append   patch-MATH85-ld.cpp.diff ld64-85-pbxproj.patch \
                        ld64-85-version.patch ld64-85-no_pie.patch
} elseif {${os.major} < 11} {
    # XCode 3.2.6
    # This was the last XCode release that supported linking ppc executables.
    version             127.2
    revision            4
    checksums           rmd160  8ee709341549a1944732daef6ebab7ef1acfcc6e \
                        sha256  97b75547b2bd761306ab3e15ae297f01e7ab9760b922bc657f4ef72e4e052142
    supported_archs     i386 x86_64

    patchfiles-append   ld64-127-any-cctools.patch
}

platform darwin 8 {
    pre-fetch {
        if {[variant_isset llvm29] || [variant_isset llvm30] || [variant_isset llvm31]} {
            if {![file exists ${prefix}/bin/llvm-config-mp-${llvm_version}]} {
                ui_error "You must first install ld64 without llvm support to build llvm.  After llvm is installed, you can reinstall ld64 with the llvm variant."
                return -code error "You must first install ld64 without llvm support to build llvm.  After llvm is installed, you can reinstall ld64 with the llvm variant."
            }
        }
    }
}

xcode.target            all ObjectDump machocheck
xcode.destroot.path     ${prefix}/bin

post-patch {
    set extra_flags {}

    if {[variant_isset llvm29] || [variant_isset llvm30] || [variant_isset llvm31]} {
        reinplace "s|-Wl,-lazy_library,/Developer/usr/lib/libLTO.dylib|-Wl,-lazy_library,[exec ${prefix}/bin/llvm-config-mp-${llvm_version} --libdir]/libLTO.dylib|g" \
            ${worksrcpath}/ld64.xcodeproj/project.pbxproj
        reinplace "s|MACPORTS_LLVM_INCLUDEDIR|[exec ${prefix}/bin/llvm-config-mp-${llvm_version} --includedir]|g" \
            ${worksrcpath}/ld64.xcodeproj/project.pbxproj

        set extra_flags [exec ${prefix}/bin/llvm-config-mp-${llvm_version} --cflags]
    } else {
        reinplace "s|-Wl,-lazy_library,/Developer/usr/lib/libLTO.dylib||g" \
            ${worksrcpath}/ld64.xcodeproj/project.pbxproj
    }

    reinplace "s|MACPORTS_CFLAGS|-I${prefix}/include ${extra_flags}|g" \
        ${worksrcpath}/ld64.xcodeproj/project.pbxproj
    reinplace "s|MACPORTS_CPLUSPLUSFLAGS|-I${prefix}/include ${extra_flags}|g" \
        ${worksrcpath}/ld64.xcodeproj/project.pbxproj

    reinplace "s|/usr/share/man/man1|${prefix}/share/man/man1|g" \
        ${worksrcpath}/ld64.xcodeproj/project.pbxproj
    reinplace "s|usr/share/man/man1|${prefix}/share/man/man1|g" \
        ${worksrcpath}/ld64.xcodeproj/project.pbxproj
    reinplace "s|/usr/local|${prefix}|g" \
        ${worksrcpath}/ld64.xcodeproj/project.pbxproj
    reinplace "s|/SDKs/Extra/usr|${prefix}|g" \
        ${worksrcpath}/ld64.xcodeproj/project.pbxproj
    reinplace "s|/Developer${prefix}|${prefix}|g" \
        ${worksrcpath}/ld64.xcodeproj/project.pbxproj
    reinplace "s|\$(DEVELOPER_DIR)/usr|${prefix}|g" \
        ${worksrcpath}/ld64.xcodeproj/project.pbxproj
    reinplace "s|\$(DEVELOPER_DIR)${prefix}|${prefix}|g" \
        ${worksrcpath}/ld64.xcodeproj/project.pbxproj
    reinplace "s|\$(RC_ProjectSourceVersion)|${version}|g" \
        ${worksrcpath}/ld64.xcodeproj/project.pbxproj
    reinplace "/VERSIONING_SYSTEM/d" \
        ${worksrcpath}/ld64.xcodeproj/project.pbxproj

    if {[file exists ${worksrcpath}/src/ld/Options.cpp]} {
        reinplace "s|@@VERSION@@|${version}|g" \
            ${worksrcpath}/src/ld/Options.cpp
    } else {
        reinplace "s|@@VERSION@@|${version}|g" \
            ${worksrcpath}/src/Options.cpp
    }

    if {${os.major} < 9} {
        reinplace "s:-lazy_library,::g" \
            ${worksrcpath}/ld64.xcodeproj/project.pbxproj

        # No CommonCrypto, use openssl
        reinplace "s:<CommonCrypto/CommonDigest.h>:<openssl/md5.h>:" \
            ${worksrcpath}/src/MachOWriterExecutable.hpp
        reinplace "s:CC_MD5:MD5:" \
            ${worksrcpath}/src/MachOWriterExecutable.hpp
        reinplace "s:MACPORTS_LD64_LDFLAGS:-lcrypto:g" \
            ${worksrcpath}/ld64.xcodeproj/project.pbxproj
    } else {
        reinplace "s:MACPORTS_LD64_LDFLAGS::g" \
            ${worksrcpath}/ld64.xcodeproj/project.pbxproj
    }
}

post-destroot {
    # ${prefix}/bin/ld will always use the llvm we built against
    # ${prefix}/libexec/ld64/ld uses relative linking for use with the llvm ports
    file mkdir ${destroot}${prefix}/libexec/ld64
    file copy ${destroot}${prefix}/bin/ld ${destroot}${prefix}/libexec/ld64/ld

    if {[variant_isset llvm29] || [variant_isset llvm30] || [variant_isset llvm31]} {
        system "install_name_tool -change ${prefix}/libexec/llvm-${llvm_version}/lib/libLTO.dylib \
                @executable_path/../lib/libLTO.dylib ${destroot}${prefix}/libexec/ld64/ld"
    }

    if {[file exists ${destroot}${prefix}/bin/libprunetrie.a]} {
        file rename ${destroot}${prefix}/bin/libprunetrie.a ${destroot}${prefix}/lib/libprunetrie.a
    }
}

livecheck.type          regex
livecheck.regex         "${name}-(\[\\d.\]+)"
