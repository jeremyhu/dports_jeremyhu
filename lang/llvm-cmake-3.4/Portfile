# $Id: Portfile 107455 2013-06-29 20:27:51Z jeremyhu@macports.org $

PortSystem              1.0
PortGroup select        1.0
PortGroup cmake         1.0

set llvm_version        3.4
name                    llvm-cmake-${llvm_version}
subport                 clang-cmake-${llvm_version} {}
set suffix              mp-${llvm_version}
set sub_prefix          ${prefix}/libexec/llvm-${llvm_version}
dist_subdir             llvm
categories              lang
platforms               darwin
license                 NCSA
maintainers             jeremyhu

if {${subport} == "llvm-cmake-${llvm_version}"} {
    homepage            http://llvm.org/
    description         llvm is a next generation compiler infrastructure
    long_description    The LLVM Core libraries provide a modern source- and \
                        target-independent optimizer, along with code \
                        generation support for many popular CPUs (as well as \
                        some less common ones!) These libraries are built \
                        around a well specified code representation known as \
                        the LLVM intermediate representation ("LLVM IR").

    depends_lib         port:libffi
    depends_run         bin:perl:perl5 port:llvm_select
} elseif {${subport} == "clang-cmake-${llvm_version}"} {
    homepage            http://clang.llvm.org/
    description         C, C++, Objective C and Objective C++ compiler
    long_description    Clang is an "LLVM native" C/C++/Objective-C compiler, \
                        which aims to deliver amazingly fast compiles (e.g. \
                        about 3x faster than GCC when compiling Objective-C \
                        code in a debug configuration), extremely useful error \
                        and warning messages and to provide a platform for \
                        building great source level tools. The included Clang \
                        Static Analyzer is a tool automatically finds bugs in \
                        your code, and is a great example of the sort of tool \
                        that can be built using the Clang frontend as a \
                        library to parse C/C++ code.

    depends_lib         port:llvm-cmake-${llvm_version} port:libffi
    depends_run         port:clang_select port:ld64
    depends_extract     bin:svn:subversion
    depends_skip_archcheck-append ld64 subversion

    default_variants    +analyzer
}

fetch.type              svn
svn.revision            185262

set compiler_rt_rev     ${svn.revision}
set libcxx_rev          ${svn.revision}
version                 ${llvm_version}-r${svn.revision}
worksrcdir              trunk
svn.url                 http://llvm.org/svn/llvm-project/llvm/trunk
#worksrcdir              release_34
#svn.url                 http://llvm.org/svn/llvm-project/llvm/branches/release_34
default_variants-append +assertions

#version                 ${llvm_version}
#epoch                   1
#master_sites            http://llvm.org/releases/${version}
#extract.suffix          .tar.gz
#distfiles               llvm-${version}.src${extract.suffix}
#worksrcdir              llvm-${version}.src

patchfiles      tiger.patch

patch.pre_args  -p1

# TODO:
# * LLVM_TARGETS_TO_BUILD: Set differnet targets rather than all based on variants
# * Consider using BUILD_SHARED_LIBS=ON to ship libLLVM-X.Y.dylib, but it causes
#   the build to fail.

configure.args-append \
    -DCMAKE_INSTALL_PREFIX="${sub_prefix}" \
    -DCMAKE_C_FLAGS="${configure.cflags}" \
    -DCMAKE_CXX_FLAGS="${configure.cxxflags}" \
    -DLLVM_ENABLE_ASSERTIONS=OFF \
    -DLLVM_REQUIRES_RTTI=ON \
    -DLLVM_INCLUDE_TESTS=OFF \
    -DLLVM_ENABLE_FFI=ON \
    -DFFI_INCLUDE_DIR=${prefix}/include \
    -DFFI_LIBRARY_DIR=${prefix}/lib

variant assertions description "Enable assertions for error detection (has performance impacts, especially on JIT)" {
    configure.args-delete -DLLVM_ENABLE_ASSERTIONS=OFF
    configure.args-append -DLLVM_ENABLE_ASSERTIONS=ON
}

configure.post_args         ../${worksrcdir}
default configure.dir       {${workpath}/build}
default build.dir           {${workpath}/build}

if {${subport} == "clang-cmake-${llvm_version}"} {
    if {${distfiles} != ""} {
        distfiles-append     clang-${version}.src${extract.suffix} compiler-rt-${version}.src${extract.suffix} libcxx-${version}.src${extract.suffix}
    }

    patchfiles-append    tiger-libclang.patch scan-build-PR-35006.patch \
                         0001-Comment-out-SL-cctools-workaround.patch

    configure.args-append \
        -DCLANG_INCLUDE_TESTS=OFF \
        -DCLANG_PATH_TO_LLVM_BUILD="${sub_prefix}" \
        -DLIBCLANG_BUILD_STATIC=ON \
        -DLLVM_BUILD_RUNTIME=ON

    select.group        clang
    select.file         ${filespath}/mp-${subport}
} elseif {${subport} == "llvm-cmake-${llvm_version}"} {
    select.group        llvm
    select.file         ${filespath}/mp-${subport}
}

# g++-4.0 fails to build some of the newer C++ for ppc
# Intel looks ok, but I prefer using gcc-4.2 for consistency
compiler.blacklist gcc-4.0

variant universal {
    post-extract {
        # workaround a bug in Apple's shipped gcc driver-driver, patched in
        # ours with driverdriver-num_infiles.patch
        if {${configure.compiler} == "gcc-4.0" ||
            ${configure.compiler} == "gcc-4.2" ||
            ${configure.compiler} == "llvm-gcc-4.2"} {
            system "echo \"static int ___ignoreme;\" > ${worksrcpath}/tools/llvm-shlib/ignore.c"
        }
    }
}

post-extract {
    file mkdir ${build.dir}

    if {${subport} == "clang-cmake-${llvm_version}"} {
        system "cd ${worksrcpath}/tools && svn co -r ${svn.revision} http://llvm.org/svn/llvm-project/cfe/trunk clang"
        #system "cd ${worksrcpath}/tools && svn co -r ${svn.revision} http://llvm.org/svn/llvm-project/cfe/branches/release_34 clang"
        #file rename ${workpath}/clang-${llvm_version}.src ${worksrcpath}/tools/clang

        system "cd ${worksrcpath}/tools/clang/tools && svn co -r ${svn.revision} http://llvm.org/svn/llvm-project/clang-tools-extra/trunk extra"
        #system "cd ${worksrcpath}/tools/clang/tools && svn co -r ${svn.revision} http://llvm.org/svn/llvm-project/clang-tools-extra/branches/release_34 extra"
        #file rename ${workpath}/clang-extra-tools-${llvm_version}.src ${worksrcpath}/tools/clang

        #TODO: Build?
        system "cd ${worksrcpath}/projects && svn co -r ${compiler_rt_rev} http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt"
        #system "cd ${worksrcpath}/projects && svn co -r ${compiler_rt_rev} http://llvm.org/svn/llvm-project/compiler-rt/branches/release_34 compiler-rt"
        #file rename ${workpath}/compiler-rt-${llvm_version}.src ${worksrcpath}/projects/compiler-rt

        #TODO: Build?
        system "cd ${worksrcpath}/projects && svn co -r ${libcxx_rev} http://llvm.org/svn/llvm-project/libcxx/trunk libcxx"
        #system "cd ${worksrcpath}/projects && svn co -r ${libcxx_rev} http://llvm.org/svn/llvm-project/libcxx/branches/release_34 libcxx"
        #file rename ${workpath}/libcxx-${llvm_version}.src ${worksrcpath}/projects/libcxx

        # Build fails due to ungenerated SVNVersion.inc
        reinplace "s:HAVE_SVN_VERSION_INC:HAVE_SVN_VERSION_INC_IGNORE_BECAUSE_BROKEN:g" ${worksrcpath}/tools/clang/lib/Basic/CMakeLists.txt
    }
}

post-destroot {
    # Don't install the cmake files ... it doesn't quite work yet
    file delete -force ${destroot}${sub_prefix}/share/llvm/cmake

    if {${subport} == "clang-cmake-${llvm_version}"} {
        # TODO: Find a way to hackup the CMakeFiles to just not install these bits in the first place
        #       Or just wait until we can actually build clang against an installed llvm
        eval file delete -force [glob ${destroot}${sub_prefix}/bin/{bugpoint,ll*,macho-dump,opt}]
        eval file delete -force [glob ${destroot}${sub_prefix}/include/llvm*]
        eval file delete -force [glob ${destroot}${sub_prefix}/lib/{BugpointPasses.dylib,*LLVM*,libLTO*,libprofile_rt*}]

        file delete ${destroot}${sub_prefix}/bin/clang
        file rename ${destroot}${sub_prefix}/bin/clang-${llvm_version} ${destroot}${sub_prefix}/bin/clang

        file delete ${destroot}${sub_prefix}/lib/libclang.dylib
        file rename ${destroot}${sub_prefix}/lib/libclang.${llvm_version}.dylib ${destroot}${sub_prefix}/lib/libclang.dylib

        system "install_name_tool -id ${sub_prefix}/lib/libclang.dylib ${destroot}${sub_prefix}/lib/libclang.dylib"
    }

    foreach bin [glob ${destroot}${sub_prefix}/bin/*] {
        set bin_filename [string map "${sub_prefix} ${prefix}" ${bin}]-${suffix}
        set exec_path [string map "${destroot}${sub_prefix} ${sub_prefix}" ${bin}]

        xinstall -m 755 "${filespath}/llvm-bin" "${bin_filename}"
        reinplace "s:EXEC_PATH:${exec_path}:" "${bin_filename}"
    }

    # r156389 (a5d2435409858728970202226d0bbbee508fe408) temporarilary removed llvm man pages
    #foreach man [glob ${destroot}${sub_prefix}/share/man/man1/*.1] {
    #    set basename [string map "${destroot}${sub_prefix}/share/man/man1/ {}" ${man}]
    #    file rename ${man} ${destroot}${prefix}/share/man/man1/[string map ".1 -${suffix}.1" ${basename}]
    #}

    if {${subport} == "clang-cmake-${llvm_version}"} {
        system "ditto ${worksrcpath}/projects/libcxx/include ${destroot}${sub_prefix}/lib/c++/v1"

        # http://trac.macports.org/ticket/33207
        ln -s ${prefix}/libexec/ld64/ld ${destroot}${sub_prefix}/bin/ld
    }
}

if {${subport} == "clang-cmake-${llvm_version}"} {
    set pythonver ""
    set pythonverdot ""

    if {![variant_isset python25] && ![variant_isset python26]} {
        default_variants +python27
    }

    variant python25 conflicts python26 python27 description {Use python 2.5} {
        set pythonver 25
        set pythonverdot 2.5
    }

    variant python26 conflicts python25 python27 description {Use python 2.6} {
        set pythonver 26
        set pythonverdot 2.6
    }

    variant python27 conflicts python25 python26 description {Use python 2.7} {
        set pythonver 27
        set pythonverdot 2.7
    }

    variant analyzer description {Install clang static analyzer} {
        configure.args-append \
            -DCLANG_ENABLE_STATIC_ANALYZER=ON

        if {[string equal "${pythonver}" ""]} {
            ui_error "You mush select a python variant to use the clang static analyzer (+analyzer)"
            error "Invalid variant combination"
        }

        depends_run-append port:perl5 port:python${pythonver}

        post-patch {
            reinplace "s|/usr/bin/env perl|${prefix}/bin/perl5|g" \
                ${worksrcpath}/tools/clang/tools/scan-build/ccc-analyzer \
                ${worksrcpath}/tools/clang/tools/scan-build/c++-analyzer \
                ${worksrcpath}/tools/clang/tools/scan-build/scan-build
            reinplace "s|/usr/bin/env python|${prefix}/bin/python${pythonverdot}|g" \
                ${worksrcpath}/tools/clang/tools/scan-build/set-xcode-analyzer \
                ${worksrcpath}/tools/clang/tools/scan-view/scan-view
        }

        post-destroot {
            file mkdir ${destroot}${sub_prefix}/libexec
            file copy ${worksrcpath}/tools/clang/tools/scan-build ${destroot}${sub_prefix}/libexec/scan-build
            file copy ${worksrcpath}/tools/clang/tools/scan-view ${destroot}${sub_prefix}/libexec/scan-view

            file delete -force ${destroot}${sub_prefix}/libexec/scan-build/.svn
            file delete -force ${destroot}${sub_prefix}/libexec/scan-view/.svn
            file delete -force ${destroot}${sub_prefix}/libexec/scan-view/Resources/.svn
            eval file delete -force [glob ${destroot}${sub_prefix}/libexec/scan-build/*.orig]

            ln -s ${sub_prefix}/libexec/scan-build/scan-build ${destroot}${sub_prefix}/bin/scan-build
            ln -s ${sub_prefix}/libexec/scan-view/scan-view ${destroot}${sub_prefix}/bin/scan-view
            ln -s ${sub_prefix}/bin ${destroot}${sub_prefix}/libexec/scan-build/bin

            xinstall -m 755 "${filespath}/llvm-bin" "${destroot}${prefix}/bin/scan-build-${suffix}"
            reinplace "s:EXEC_PATH:${sub_prefix}/bin/scan-build:" "${destroot}${prefix}/bin/scan-build-${suffix}"

            xinstall -m 755 "${filespath}/llvm-bin" "${destroot}${prefix}/bin/scan-view-${suffix}"
            reinplace "s:EXEC_PATH:${sub_prefix}/bin/scan-view:" "${destroot}${prefix}/bin/scan-view-${suffix}"
        }
    }
}

livecheck.type          none
